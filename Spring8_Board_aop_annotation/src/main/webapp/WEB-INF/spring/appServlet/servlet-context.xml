<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.naver.home4" />
	
	<!-- aop 관련 annotation들을 인식하고 처리해준다. -->
	<aop:aspectj-autoproxy/>
	
	 <!-- root-context.xml에 하기 내용을 작성한 후,
	 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		</bean>
	 	
	 	1. <tx:advice> : 트랜잭션을 적용할 때 사용될 Advisor를 생성합니다.
	 	2. id는 생성될 트랜잭션 Advisor의 식별 값입니다.
	 	3. transaction-manager 속성에는 DataSourceTransactionManager의 빈을 설정합니다.
	 	4. <tx:attributes> 태그의 자식 <tx:method>를 이용해서 트랜잭션을 적용할 메서드를 설정합니다.
	 	 -->
 	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
 	 	<tx:attributes>
 	 		<tx:method name="*"/>
 	 	</tx:attributes>
 	 </tx:advice>
 	 
 	 <aop:config>
 	 	<aop:pointcut expression="execution(* com.naver.home4..*Impl.*(..))" id="allPointcut"/>
 	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="allPointcut"/>
 	 </aop:config>
</beans:beans>
